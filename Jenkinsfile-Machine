pipeline {
  
  agent any
  
//  triggers {
//    cron('0 0 * * *')
//    upstream(upstreamProjects: 'LocalEGA Build Trigger')
//  }
  options { disableConcurrentBuilds() }
  environment {
    GIT_COMMIT_SHORT = sh(
                    script: "printf \$(git rev-parse --short ${GIT_COMMIT})${BUILD_NUMBER}",
                    returnStdout: true
            )
    LEGA_private_IP='158.37.63.36'
    LEGA_public_IP='158.37.63.170'
    CEGA_IP='158.39.75.139'
  }
  
  stages {
    stage('Create VMs') {
      steps {
        parallel(
         "LEGA-private": {
            sh '''
              gradle :cluster:createLEGAPrivateMachine \
              -PmachineIp=${LEGA_private_IP} \
              -PsshUser=ubuntu \
              -PsshKeyFile=keys/tsd.pem 

#              -Pmachine=lega-private \
#              docker-machine create --driver generic \
#                --generic-ip-address=${LEGA_private_IP} \
#                --generic-ssh-user=ubuntu \
#                --generic-ssh-key=keys/tsd.pem \
#                lega-private
#              eval "$(docker-machine env lega-private)"
#              docker swarm init --advertise-addr ${LEGA_private_IP}
            '''
           },
         "LEGA-public": {
            sh '''
              gradle :cluster:createLEGAPublicMachine \
              -PmachineIp=${LEGA_public_IP} \
              -PsshUser=ubuntu \
              -PsshKeyFile=keys/tsd.pem 

#              -Pmachine=lega-public \
            '''
           },
         "CEGA": {
            sh '''
              gradle :cluster:createCEGAMachine \
              -PmachineIp=${CEGA_IP} \
              -PsshUser=ubuntu \
              -PsshKeyFile=keys/tsd.pem 

#              -Pmachine=cega \
            '''
           }
         )
      }
    }
    stage('Bootstrap') {
      steps {

                      sh '''
                        gradle :cega:createConfiguration \
                        -i
      
                        gradle :lega-private:createConfiguration \
                        -i
       
                        gradle :lega-public:createConfiguration \
                        -PcegaIP=${CEGA_IP} \
                        -PlegaPrivateIP=${LEGA_private_IP} \
                        -i
                      '''
      }
    }

    stage('Deploy') {
      steps {
      parallel(
            "CEGA": {
                      sh '''
                        gradle :cega:deployStack \
                        -i
                        #-Pmachine=cega
                        sleep 150
                        eval "$(docker-machine env cega)"
                        gradle ls
                      '''
            },
            "LEGA Public": {
                      sh '''
                        gradle :lega-public:deployStack \
                        -i
                        #-Pmachine=lega-public
                        sleep 150
                        eval "$(docker-machine env lega-public)"
                        gradle ls
                      '''
            },
            "LEGA Private": {
                      sh '''
                        gradle :lega-private:deployStack \
                        -i
                        #-Pmachine=lega-private
                        sleep 150
                        eval "$(docker-machine env lega-private)"
                        gradle ls
                      '''
            }
          )
      }
    }
    stage('Test') {
      steps {
        sh '''
          gradle ingest \
          -PcegaIP=${CEGA_IP} \
          -PlegaPublicIP=${LEGA_public_IP} \
          -PlegaPrivateIP=${LEGA_private_IP} \
          -i
        '''
      }
    }
  }
  
  post('Remove VM') { 
    failure {
        sh '''
          eval "$(docker-machine env lega-public)"
          echo '---=== lega-public_inbox Logs ===---'
          docker service logs lega-public_inbox
          echo '---=== lega-public_mq Logs ===---'
          docker service logs lega-public_mq
        '''
        sh '''
          eval "$(docker-machine env cega)"
          echo '---=== cega_cega-mq Logs ===---'
          docker service logs cega_cega-mq
        '''
        sh '''
          eval "$(docker-machine env lega-private)"
          echo '---=== lega-private-mq Logs ===---'
          docker service logs lega-private_mq
          echo '---=== lega-private_ingest Logs ===---'
          docker service logs lega-private_ingest
          echo '---=== lega-private_inbox-s3 Logs ===---'
          docker service logs lega-private_inbox-s3
          echo '---=== lega-private_vault-s3 Logs ===---'
          docker service logs lega-private_vault-s3
          echo '---=== lega-private_db Logs ===---'
          docker service logs lega-private_db
          echo '---=== lega-private_verify Logs ===---'
          docker service logs lega-private_verify
        '''
        

    }
//   always {
//      sh 'docker-machine rm -y CEGA-${GIT_COMMIT_SHORT} LEGA-public-${GIT_COMMIT_SHORT} LEGA-private-${GIT_COMMIT_SHORT}'
//      sh '''
//        eval "$(docker-machine env CEGA-${GIT_COMMIT_SHORT})"
//        docker swarm leave --force
//        docker-machine rm -y CEGA-${GIT_COMMIT_SHORT}
//        '''
//      sh '''
//        eval "$(docker-machine env LEGA-public-${GIT_COMMIT_SHORT})"
//        docker swarm leave --force
//        docker-machine rm -y  LEGA-public-${GIT_COMMIT_SHORT}
//        '''
//      sh '''
//        eval "$(docker-machine env LEGA-private-${GIT_COMMIT_SHORT})"
//        docker swarm leave --force
//        docker-machine rm -y  LEGA-private-${GIT_COMMIT_SHORT}
//      '''
//   }
    cleanup { 
            sh '''
              docker-machine rm -f $(docker-machine ls -q)
              chmod 400 keys/tsd.pem*
              ssh -v -tt -o StrictHostKeyChecking=no -i keys/tsd.pem -l ubuntu -p 22 ${LEGA_private_IP} << EOF
                docker swarm leave --force
                rm -rf  LocalEGA-deploy-swarm
                MACHINES=$(docker-machine ls -q)
                [ -z "$MACHINES" ] && echo "No docker machines" || docker-machine rm -f ${MACHINES}
                docker system prune -f
                sudo systemctl start docker
                sudo service docker start
                gradle --stop
                exit
            '''
            sh '''
              chmod 400 keys/tsd.pem*
              ssh -v -tt -o StrictHostKeyChecking=no -i keys/tsd.pem -l ubuntu -p 22 ${LEGA_public_IP} << EOF
                docker swarm leave --force
                rm -rf  LocalEGA-deploy-swarm
                MACHINES=$(docker-machine ls -q)
                [ -z "$MACHINES" ] && echo "No docker machines" || docker-machine rm -f ${MACHINES}
                docker system prune -f
                sudo systemctl start docker
                sudo service docker start
                gradle --stop
                exit
            '''
            sh '''
              chmod 400 keys/tsd.pem*
              ssh -v -tt -o StrictHostKeyChecking=no -i keys/tsd.pem -l ubuntu -p 22 ${CEGA_IP} << EOF
                docker swarm leave --force
                rm -rf  LocalEGA-deploy-swarm
                MACHINES=$(docker-machine ls -q)
                [ -z "$MACHINES" ] && echo "No docker machines" || docker-machine rm -f ${MACHINES}
                docker system prune -f
                sudo systemctl start docker
                sudo service docker start
                gradle --stop
                exit
            '''
    }
  }
  
}
