pipeline {
  
  agent any
  
  triggers {
    cron('0 0 * * *')
    upstream(upstreamProjects: 'LocalEGA Build Trigger')
  }
  
  environment {
    OS_USERNAME=credentials('OS_USERNAME')
    OS_PASSWORD=credentials('OS_PASSWORD')
    OS_TENANT_ID=credentials('OS_TENANT_ID')
    OS_DOMAIN_NAME=credentials('OS_DOMAIN_NAME')
    OS_AUTH_URL=credentials('OS_AUTH_URL')
    OS_IDENTITY_API_VERSION=credentials('OS_IDENTITY_API_VERSION')
    OS_REGION_NAME=credentials('OS_REGION_NAME')
    OS_NETWORK_NAME=credentials('OS_NETWORK_NAME')
    OS_SECURITY_GROUPS=credentials('OS_SECURITY_GROUPS')
    OS_SSH_USER=credentials('OS_SSH_USER')
    OS_FLAVOR_NAME=credentials('OS_FLAVOR_NAME')
    OS_IMAGE_ID=credentials('OS_IMAGE_ID')
    GIT_COMMIT_SHORT = sh(
                    script: "printf \$(git rev-parse --short ${GIT_COMMIT})${BUILD_NUMBER}",
                    returnStdout: true
            )
    LEGA_private_IP='158.37.63.36'
    LEGA_public_IP='158.37.63.170'
    CEGA_IP='158.39.75.139'
  }
  
  stages {
    stage('Cleanup') {
      steps {
        parallel(
         "LEGA-private": {
            sh '''
              #ssh-keygen -R ${LEGA_private_IP}
              ssh -v -tt -o StrictHostKeyChecking=no -i tsd.pem -l ubuntu -p 22 ${LEGA_private_IP}
              docker swarm leave --force
              rm -rf  LocalEGA-deploy-swarm
              docker-machine rm -f $(docker-machine ls -q)
              docker system prune -f
              sudo systemctl start docker
              sudo service docker start
            '''
           },
         "LEGA-public": {
            sh '''
              #ssh-keygen -R ${LEGA_private_IP}
              ssh -tt -i tsd.pem -l ubuntu -p 22 ${LEGA_public_IP}
              docker swarm leave --force
              rm -rf  LocalEGA-deploy-swarm
              docker-machine rm -f $(docker-machine ls -q)
              docker system prune -f
              sudo systemctl start docker
              sudo service docker start
            '''
           },
         "CEGA": {
            sh '''
              #ssh-keygen -R ${LEGA_private_IP}
              ssh -tt -i tsd.pem -l ubuntu -p 22 ${CEGA_IP}
              docker swarm leave --force
              rm -rf  LocalEGA-deploy-swarm
              docker-machine rm -f $(docker-machine ls -q)
              docker system prune -f
              sudo systemctl start docker
              sudo service docker start
            '''
           }
         )
      }
    }
    stage('Create VMs') {
      steps {
        parallel(
         "LEGA-private": {
            sh '''
              docker-machine create --driver generic \
                --generic-ip-address=${LEGA_private_IP} \
                --generic-ssh-user=ubuntu \
                --generic-ssh-key=tsd.pem \
                LEGA-private-${GIT_COMMIT_SHORT}
              eval "$(docker-machine env LEGA-private-${GIT_COMMIT_SHORT})"
              docker swarm init --advertise-addr ${LEGA_private_IP}
            '''
           },
         "LEGA-public": {
            sh '''
              docker-machine create --driver generic \
                --generic-ip-address=${LEGA_public_IP} \
                --generic-ssh-user=ubuntu \
                --generic-ssh-key=tsd.pem \
                LEGA-public-${GIT_COMMIT_SHORT}
              eval "$(docker-machine env LEGA-public-${GIT_COMMIT_SHORT})"
              docker swarm init --advertise-addr ${LEGA_public_IP}
            '''
           },
         "CEGA": {
            sh '''
              docker-machine create --driver generic \
                --generic-ip-address=${CEGA_IP} \
                --generic-ssh-user=ubuntu \
                --generic-ssh-key=tsd.pem \
                CEGA-${GIT_COMMIT_SHORT}
              eval "$(docker-machine env CEGA-${GIT_COMMIT_SHORT})"
              docker swarm init --advertise-addr ${CEGA_IP}
            '''
           }
         )
      }
    }
    stage('Bootstrap') {
      steps {
      parallel(
            "CEGA": {
                      sh '''
                        gradle :cega:createConfiguration -Pmachine=CEGA-${GIT_COMMIT_SHORT}
                      '''
            },
            "LEGA Private": {
                      sh '''
                        gradle :lega-private:createConfiguration -Pmachine=LEGA-private-${GIT_COMMIT_SHORT}
                      '''
            },
            "LEGA Public": {
                      sh '''
                        gradle :lega-public:createConfiguration -Pmachine=LEGA-public-${GIT_COMMIT_SHORT} -PcegaIP=$(docker-machine ip CEGA-${GIT_COMMIT_SHORT}) -PlegaPrivateIP=$(docker-machine ip LEGA-private-${GIT_COMMIT_SHORT})
                      '''
            }
          )
      }
    }

    stage('Deploy') {
      steps {
      parallel(
            "CEGA": {
                      sh '''
                        gradle :cega:deployStack -Pmachine=CEGA-${GIT_COMMIT_SHORT}
                        sleep 90
                        eval "$(docker-machine env CEGA-${GIT_COMMIT_SHORT})"
                        gradle ls
                      '''
            },
            "LEGA Public": {
                      sh '''
                        gradle :lega-public:deployStack -Pmachine=LEGA-public-${GIT_COMMIT_SHORT}
                        sleep 90
                        eval "$(docker-machine env LEGA-public-${GIT_COMMIT_SHORT})"
                        gradle ls
                      '''
            },
            "LEGA Private": {
                      sh '''
                        gradle :lega-private:deployStack -Pmachine=LEGA-private-${GIT_COMMIT_SHORT}
                        sleep 90
                        eval "$(docker-machine env LEGA-private-${GIT_COMMIT_SHORT})"
                        gradle ls
                      '''
            }
          )
      }
    }
    stage('Test') {
      steps {
        sh '''
          gradle ingest -PcegaIP=$(docker-machine ip CEGA-${GIT_COMMIT_SHORT}) -PlegaPublicIP=$(docker-machine ip LEGA-public-${GIT_COMMIT_SHORT}) -PlegaPrivateIP=$(docker-machine ip LEGA-private-${GIT_COMMIT_SHORT})
        '''
      }
    }
  }
  
  post('Remove VM') { 
    failure {
        sh '''
          eval "$(docker-machine env LEGA-public-${GIT_COMMIT_SHORT})"
          echo '---=== lega-public_inbox Logs ===---'
          docker service logs LEGA-public-${GIT_COMMIT_SHORT}_inbox
          echo '---=== lega-public_mq Logs ===---'
          docker service logs LEGA-public-${GIT_COMMIT_SHORT}_mq
        '''
        sh '''
          eval "$(docker-machine env CEGA-${GIT_COMMIT_SHORT})"
          echo '---=== cega_cega-mq Logs ===---'
          docker service logs CEGA-${GIT_COMMIT_SHORT}_cega-mq
        '''
        sh '''
          eval "$(docker-machine env LEGA-private-${GIT_COMMIT_SHORT})"
          echo '---=== LEGA-private-${GIT_COMMIT_SHORT}_private-mq Logs ===---'
          docker service logs LEGA-private-${GIT_COMMIT_SHORT}_private-mq
          echo '---=== LEGA-private-${GIT_COMMIT_SHORT}_ingest Logs ===---'
          docker service logs LEGA-private-${GIT_COMMIT_SHORT}_ingest
          echo '---=== LEGA-private-${GIT_COMMIT_SHORT}_inbox-s3 Logs ===---'
          docker service logs LEGA-private-${GIT_COMMIT_SHORT}_inbox-s3
          echo '---=== LEGA-private-${GIT_COMMIT_SHORT}_db Logs ===---'
          docker service logs LEGA-private-${GIT_COMMIT_SHORT}_db
          echo '---=== LEGA-private-${GIT_COMMIT_SHORT}_verify Logs ===---'
          docker service logs LEGA-private-${GIT_COMMIT_SHORT}_verify
        '''
    }
    always {
//      sh 'docker-machine rm -y CEGA-${GIT_COMMIT_SHORT} LEGA-public-${GIT_COMMIT_SHORT} LEGA-private-${GIT_COMMIT_SHORT}'
      sh '''
        eval "$(docker-machine env CEGA-${GIT_COMMIT_SHORT})"
        docker swarm leave --force
        docker-machine rm -y CEGA-${GIT_COMMIT_SHORT}
        '''
      sh '''
        eval "$(docker-machine env LEGA-public-${GIT_COMMIT_SHORT})"
        docker swarm leave --force
        docker-machine rm -y  LEGA-public-${GIT_COMMIT_SHORT}
        '''
      sh '''
        eval "$(docker-machine env LEGA-private-${GIT_COMMIT_SHORT})"
        docker swarm leave --force
        docker-machine rm -y  LEGA-private-${GIT_COMMIT_SHORT}
      '''
     }
  //  cleanup { 
  //  }
  }
  
}
