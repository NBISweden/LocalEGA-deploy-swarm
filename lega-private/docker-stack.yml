version: '3.3'

services:

  mq:
    image: rabbitmq:3.7.8-management
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s
    configs:
      - source: lega-private.defs.json
        target: /etc/rabbitmq/defs.json
      - source: lega-private.rabbitmq.config
        target: /etc/rabbitmq/rabbitmq.config
    command: ["rabbitmq-server"]

  db:
    image: postgres:10
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s
    environment:
      - PGDATA=/ega/data
      - DB_LEGA_IN_PASSWORD
      - DB_LEGA_OUT_PASSWORD
      - SSL_SUBJ=/C=NO/ST=Norway/L=Oslo/O=UiO/OU=IFI/CN=LocalEGA/emailAddress=ega@nbis.se
    volumes:
      - db:/ega/data
    configs:
      - source: postgresql.conf
        target: /etc/ega/pg.conf
      - source: main.sql
        target: /docker-entrypoint-initdb.d/main.sql
      - source: grants.sql
        target: /docker-entrypoint-initdb.d/grants.sql
      - source: download.sql
        target: /docker-entrypoint-initdb.d/download.sql
      - source: ebi.sql
        target: /docker-entrypoint-initdb.d/ebi.sql
      - source: qc.sql
        target: /docker-entrypoint-initdb.d/qc.sql
      - source: db.entrypoint.sh
        target: /usr/bin/ega-entrypoint.sh
        uid: '999'
        gid: '999'
        mode: 0555
    entrypoint: ["/bin/bash", "/usr/bin/ega-entrypoint.sh"]

  inbox-s3:
    image: minio/minio:RELEASE.2018-12-19T23-46-24Z
    ports:
      - "9001:9000"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s
    environment:
      - MINIO_ACCESS_KEY=${INBOX_S3_ACCESS_KEY}
      - MINIO_SECRET_KEY=${INBOX_S3_SECRET_KEY}
    volumes:
      - inbox_s3:/data
    command: server /data

  vault-s3:
    image: minio/minio:RELEASE.2018-12-19T23-46-24Z
    ports:
      - "9000:9000"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s
    environment:
      - MINIO_ACCESS_KEY=${VAULT_S3_ACCESS_KEY}
      - MINIO_SECRET_KEY=${VAULT_S3_SECRET_KEY}
    volumes:
      - vault_s3:/data
    command: server /data

  keys:
    image: cscfi/ega-keyserver:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s
    environment:
      - SPRING_PROFILES_ACTIVE=no-oss
      - EGA_KEY_PATH=/etc/ega/pgp/ega.sec,/etc/ega/pgp/ega2.sec
      - EGA_KEYPASS_PATH=/etc/ega/pgp/ega.sec.pass,/etc/ega/pgp/ega2.sec.pass
      - EGA_SHAREDPASS_PATH=/etc/ega/pgp/ega.shared.pass
      - EGA_PUBLICKEY_URL=
      - EGA_LEGACY_PATH=
    configs:
      - source: ega.sec
        target: /etc/ega/pgp/ega.sec
      - source: ega2.sec
        target: /etc/ega/pgp/ega2.sec
      - source: ega.sec.pass
        target: /etc/ega/pgp/ega.sec.pass
      - source: ega2.sec.pass
        target: /etc/ega/pgp/ega2.sec.pass
      - source: ega.shared.pass
        target: /etc/ega/pgp/ega.shared.pass

  verify:
    image: nbisweden/ega-base:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s
    depends_on:
      - db
      - keys
      - s3
      - mq
    environment:
      - LEGA_PASSWORD
      - S3_ACCESS_KEY=${VAULT_S3_ACCESS_KEY}
      - S3_SECRET_KEY=${VAULT_S3_SECRET_KEY}
    configs:
      - source: conf.ini
        target: /etc/ega/conf.ini
    entrypoint: ["gosu", "lega", "ega-verify"]

  res:
    image: cscfi/ega-res:latest
    ports:
      - "8081:8080"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s
    depends_on:
      - vault-s3
      - keys
    environment:
      - SPRING_PROFILES_ACTIVE=no-oss,LocalEGA
      - EGA_EGA_EXTERNAL_URL=
      - EGA_EGA_CRAM_FASTA_A=
      - EGA_EGA_CRAM_FASTA_B=
      - EGA_EBI_FIRE_URL=
      - EGA_EBI_FIRE_ARCHIVE=
      - EGA_EBI_FIRE_KEY=
      - SERVICE_ARCHIVE_CLASS=
      - EGA_SHAREDPASS_PATH=/etc/ega/pgp/ega.shared.pass
      - EGA_EBI_AWS_ENDPOINT_URL=http://vault-s3:9000
      - EGA_EBI_AWS_ACCESS_KEY=${VAULT_S3_ACCESS_KEY}
      - EGA_EBI_AWS_ACCESS_SECRET=${VAULT_S3_SECRET_KEY}
      - EGA_EBI_AWS_ENDPOINT_REGION=
    configs:
      - source: ega.shared.pass
        target: /etc/ega/pgp/ega.shared.pass

  id-mapper:
    image: nbisweden/ega-base:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s
    depends_on:
      - mq
      - db
    configs:
      - source: conf.ini
        target: /etc/ega/conf.ini
    entrypoint: ["gosu", "lega", "ega-id-mapper"]

  ingest:
    image: nbisweden/ega-base:s3
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s
    depends_on:
      - mq
      - db
      - inbox-s3
      - vault-s3
    environment:
      - S3_ACCESS_KEY=${VAULT_S3_ACCESS_KEY}
      - S3_SECRET_KEY=${VAULT_S3_SECRET_KEY}
    configs:
      - source: conf.ini
        target: /etc/ega/conf.ini
    entrypoint: ["gosu", "lega", "ega-ingest"]

  mediator-server:
    image: uiobmi/mediator.server:latest
    ports:
      - "8080:8080"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s
    depends_on:
      - mq
    environment:
      - BROKER_HOST=mq

volumes:
  inbox_s3:
  vault_s3:
  db:

configs:
  lega-private.defs.json:
    external: true
  lega-private.rabbitmq.config:
    external: true
  postgresql.conf:
    external: true
  main.sql:
    external: true
  grants.sql:
    external: true
  download.sql:
    external: true
  ebi.sql:
    external: true
  qc.sql:
    external: true
  db.entrypoint.sh:
    external: true
  conf.ini:
    external: true
  ega.sec:
    external: true
  ega2.sec:
    external: true
  ega.sec.pass:
    external: true
  ega2.sec.pass:
    external: true
  ega.shared.pass:
    external: true
