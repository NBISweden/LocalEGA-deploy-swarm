import se.nbis.lega.deployment.*
import se.nbis.lega.deployment.lega.*

import java.util.stream.Collectors

task removeVolumes(type: RemoveVolumesTask) {
    setGroup Groups.LEGA_PRIVATE.getName()

    setVolumes Arrays.stream(Volume.values()).map { v -> v.getName() }.collect(Collectors.toSet())
}

task removeNetworks(type: RemoveNetworksTask) {
    setGroup Groups.LEGA_PRIVATE.getName()

    setNetworks Arrays.stream(Network.values()).map { v -> v.getName() }.collect(Collectors.toSet())
}

task clearConfiguration(type: ClearConfigurationTask) {
    setGroup Groups.LEGA_PRIVATE.getName()

    setConfigs Arrays.stream(LegaPrivateConfig.values()).map { c -> c.getName() }.collect(Collectors.toSet())
}

task createDBConfiguration(type: CreateDBConfigurationTask)

task createKeysConfiguration(type: CreateKeysConfigurationTask)

task createMinioConfiguration(type: CreateMinioConfigurationTask)

task createConfIni(type: CreateLegaPrivateConfIniConfigurationTask)

task createKeysIni(type: CreateKeysIniConfigurationTask)

task createRESConfiguration(type: CreateRESConfigurationTask)

task createIngestConfiguration(type: CreateIngestConfigurationTask)

task createConfiguration {
    setGroup Groups.LEGA_PRIVATE.getName()

    dependsOn clearConfiguration, createConfIni, createKeysIni
}
task deployStack(type: DeployStackTask) {
    setGroup Groups.LEGA_PRIVATE.getName()

    setComposeFile file("docker-stack.yml").absolutePath
    setStackName Groups.LEGA_PRIVATE.getName()
    setEnvironment getTraceAsMap()
}

task removeStack(type: RemoveStackTask) {
    setGroup Groups.LEGA_PRIVATE.getName()

    setStackName Groups.LEGA_PRIVATE.getName()
}