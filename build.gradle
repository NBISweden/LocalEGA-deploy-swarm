import se.nbis.lega.deployment.test.EncryptFileTask
import se.nbis.lega.deployment.test.GenerateFileTask
import se.nbis.lega.deployment.test.IngestFileTask
import se.nbis.lega.deployment.test.UploadFileTask

plugins {
    id 'com.gradle.build-scan' version '2.0.2'
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

task purge() {
    setGroup "swarm"

    dependsOn ":lega-public:removeVolumes", ":lega-public:removeNetworks", ":lega-private:removeVolumes", ":lega-private:removeNetworks"
}

task clean() {
    setGroup "swarm"

    dependsOn ":cega:clearConfiguration", ":lega-public:clearConfiguration", ":lega-private:clearConfiguration"
    doLast {
        new File(".tmp").deleteDir()
    }
}

task bootstrap() {
    setGroup "swarm"

    dependsOn ":cega:createConfiguration", ":lega-public:createConfiguration", ":lega-private:createConfiguration" , ":createNetworks"
}

task deploy() {
    setGroup "swarm"

    dependsOn ":cega:deployStack", ":lega-public:deployStack", ":lega-private:deployStack"
}

task rm() {
    setGroup "swarm"

    doLast {
        exec {
            executable "docker"
            args "stack", "rm", "lega-private"
        }
        sleep 10000
        exec {
            executable "docker"
            args "stack", "rm", "lega-public"
        }
        sleep 10000
        exec {
            executable "docker"
            args "stack", "rm", "cega"
        }
    }
}

task clean_all() {
    setGroup "swarm"

    dependsOn rm
    dependsOn purge
    dependsOn clean
}

task ls() {
    setGroup "swarm"
    
    doLast {
        exec {
            executable "docker"
            args "service", "list"
        }
    }
}

task file(type: GenerateFileTask)

task encrypt(type: EncryptFileTask)

task upload(type: UploadFileTask)

task ingest(type: IngestFileTask)

task createCEGANetwork() {
    setGroup "swarm"

    doLast {
        exec {
            ignoreExitValue = true
            executable "docker"
            args "network", "create", "-d", "overlay", "cega"
        }
    }
}

task createLEGAPublicNetwork() {
    setGroup "swarm"

    doLast {
        exec {
            ignoreExitValue = true
            executable "docker"
            args "network", "create", "-d", "overlay", "lega-public"
        }
    }
}

task createLEGAPrivateNetwork() {
    setGroup "swarm"

    doLast {
        exec {
            ignoreExitValue = true
            executable "docker"
            args "network", "create", "-d", "overlay", "lega-private"
        }
    }
}


task createNetworks() {
    setGroup "swarm"
    
    dependsOn createCEGANetwork
    dependsOn createLEGAPublicNetwork
    dependsOn createLEGAPrivateNetwork
}